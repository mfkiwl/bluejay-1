//==============================================
// include 
//==============================================
#include "mie.hpp"

//==============================================
// mie::CSRRW
//==============================================
uint64_t mie::CSRRW(uint64_t rs1)
{
    uint64_t rd;
    asm volatile ("csrrw %0, mie, %1" : "=r" (rd) : "r" (rs1) : );
    return rd;
}

//==============================================
// mie::CSRR
//==============================================
uint64_t mie::CSRR()
{
    uint64_t rd;
    asm volatile ("csrr %0, mie" : "=r" (rd) : : );
    return rd;
}

//==============================================
// mie::CSRW
//==============================================
void mie::CSRW(uint64_t rs1)
{
    asm volatile ("csrw mie, %0" : : "r" (rs1) : );
}

//==============================================
// mie::CSRRS
//==============================================
uint64_t mie::CSRRS(uint64_t rs1)
{
    uint64_t rd;
    asm volatile ("csrrs %0, mie, %1" : "=r" (rd) : "r" (rs1) : );
    return rd;
}

//==============================================
// mie::CSRS
//==============================================
void mie::CSRS(uint64_t rs1)
{
    asm volatile ("csrs mie, %0" : : "r" (rs1) : );
}

//==============================================
// mie::CSRRC
//==============================================
uint64_t mie::CSRRC(uint64_t rs1)
{
    uint64_t rd;
    asm volatile ("csrrc %0, mie, %1" : "=r" (rd) : "r" (rs1) : );
    return rd;
}

//==============================================
// mie::CSRC
//==============================================
void mie::CSRC(uint64_t rs1)
{
    asm volatile ("csrc mie, %0" : : "r" (rs1) : );
}
